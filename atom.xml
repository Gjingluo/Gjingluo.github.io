<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Whales fall&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/c1a43f6ef43f1cede365f07f3b8006fc</icon>
  <subtitle>Try different things</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-18T12:10:13.061Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sunny&amp;G</name>
    <email>1922776199@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java Web学习（二）</title>
    <link href="http://yoursite.com/2018/07/18/Java-Web%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2018/07/18/Java-Web学习（二）/</id>
    <published>2018-07-18T09:18:22.770Z</published>
    <updated>2018-07-18T12:10:13.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ServletRequest"><a href="#一、ServletRequest" class="headerlink" title="一、ServletRequest"></a>一、ServletRequest</h2><h4 id="def：-ServletRequest由Servlet容器来管理，当客户请求到来时，容器创建一个ServletRequest对象，封装请求数据，同时创建一个ServletResponse对象，封装响应数据。这两个对象将被容器作为service（）方法的参数传递给Servlet，Servlet利用ServletRequest对象获取客户端发来的请求数据，利用ServletResponse对象发送响应数据。ServletRequest封装了请求信息，可以从中获取任何的请求信息。"><a href="#def：-ServletRequest由Servlet容器来管理，当客户请求到来时，容器创建一个ServletRequest对象，封装请求数据，同时创建一个ServletResponse对象，封装响应数据。这两个对象将被容器作为service（）方法的参数传递给Servlet，Servlet利用ServletRequest对象获取客户端发来的请求数据，利用ServletResponse对象发送响应数据。ServletRequest封装了请求信息，可以从中获取任何的请求信息。" class="headerlink" title="def： ServletRequest由Servlet容器来管理，当客户请求到来时，容器创建一个ServletRequest对象，封装请求数据，同时创建一个ServletResponse对象，封装响应数据。这两个对象将被容器作为service（）方法的参数传递给Servlet，Servlet利用ServletRequest对象获取客户端发来的请求数据，利用ServletResponse对象发送响应数据。ServletRequest封装了请求信息，可以从中获取任何的请求信息。"></a>def： ServletRequest由Servlet容器来管理，当客户请求到来时，容器创建一个ServletRequest对象，封装请求数据，同时创建一个ServletResponse对象，封装响应数据。这两个对象将被容器作为service（）方法的参数传递给Servlet，Servlet利用ServletRequest对象获取客户端发来的请求数据，利用ServletResponse对象发送响应数据。ServletRequest封装了请求信息，可以从中获取任何的请求信息。</h4><p>login.html页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;LoginServlet&quot; menthod=&quot;post&quot;&gt;</span><br><span class="line">user: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;</span><br><span class="line">password: &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">interesting:</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;reading&quot;/&gt;Reading</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;game&quot;/&gt;Game</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;party&quot;/&gt;Party</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;interesting&quot; value=&quot;shopping&quot;/&gt;Shopping</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p><code>String getParameter(String name)</code>：根据请求参数的名字，返回参数值。若请求参数有多个值，则该方法只能获取第一值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String interesting = request.getParameter(&quot;interesting&quot;);</span><br><span class="line">String user = request.getParameter(&quot;user&quot;);</span><br><span class="line">String password = request.getParameter(&quot;password&quot;);</span><br><span class="line">System.out.println(user + &quot; ,&quot; + password);</span><br><span class="line">System.out.println(interesting);</span><br></pre></td></tr></table></figure></p><p><code>String[] getParameterValues(String name)</code>:根据请求参数的名字，返回请求参数对应的字符串数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String [] interestings = request.getParameterValues(&quot;interesting&quot;);</span><br><span class="line">for(String interest: interestings)&#123;</span><br><span class="line">System.out.println(&quot;---&gt;&quot; + interest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Enumeration getParameterNames()</code>:返回参数名对应的Enumeration对象，类似于ServletConfig(或ServletContext)的getInitParameterNames()方法 。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; names = request.getParameterNames();</span><br><span class="line">while(names.hasMoreElements())&#123;</span><br><span class="line">String name = names.nextElement();</span><br><span class="line">String val = request.getParameter(name);</span><br><span class="line">System.out.println(name + &quot;:&quot; + val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Map getParameterMap():返回请求参数的键值对：key：参数名，value：参数值，String 数组类型。map.entrySet()键值对的集合，Set里面的类型是Map.Entry。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; map =request.getParameterMap();//将请求参数封装到Map&lt;String, String[]&gt;中。</span><br><span class="line">for(Map.Entry&lt;String, String[]&gt; entry: map.entrySet())&#123;</span><br><span class="line">System.out.println(&quot;**&quot; + entry.getKey() + &quot;:&quot; + Arrays.asList(entry.getValue()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>HttpServletRequest:是ServletRequest的子接口，针对HTTP请求所定义，里面包含了大量获取HTTP请求头的所有信息。</strong><br>通过HttpServletRequest的getRequestURI()方法获取请求URL。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">System.out.println(requestURI);</span><br></pre></td></tr></table></figure></p><p>通过HttpServletRequest的getMethod()方法获取请求方式（post/get）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String menthod = httpServletRequest.getMethod();</span><br><span class="line">System.out.println(menthod);</span><br></pre></td></tr></table></figure></p><p>通过HttpServletRequest的getQueryString()方法：若是一个GET请求，获取请求的参数对应的那个字符串，即？后的那个字符串。若是POST，则为null。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String queryString = httpServletRequest.getQueryString();</span><br><span class="line">System.out.println(queryString);</span><br></pre></td></tr></table></figure></p><p>通过HttpServletRequest的getServletPath()方法，获取请求的Servlet的映射路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String serletPath = httpServletRequest.getServletPath();</span><br><span class="line">System.out.println(serletPath);</span><br></pre></td></tr></table></figure></p><h2 id="二、ServletResponse"><a href="#二、ServletResponse" class="headerlink" title="二、ServletResponse"></a>二、ServletResponse</h2><h4 id="def-Response代表响应，响应消息中的状态码、响应头、实体内容都可以由它进行操作。"><a href="#def-Response代表响应，响应消息中的状态码、响应头、实体内容都可以由它进行操作。" class="headerlink" title="def:Response代表响应，响应消息中的状态码、响应头、实体内容都可以由它进行操作。"></a>def:Response代表响应，响应消息中的状态码、响应头、实体内容都可以由它进行操作。</h4><p>1）setCharacterEncoding(String charset)：设置响应正文的字符编码。响应正文的默认字符编码为ISO-8859-1 .</p><p>2）setContentLength(int len)：设置响应正文的长度。</p><p>3）setContentType（String type）：设置响应正文的MIME类型4。</p><p>4）setBufferSize（int size）：设置用于存放响应正文数据的缓存区的大小。</p><p>5）getCharacterEncoding（）：返回响应正文的字符编码。</p><p>6）getContentType（）：返回响应正文的MIME类型。</p><p>7）getBufferSize（）：获得用于存放正文数据的缓存区的大小。</p><p>8）reset（）：清空缓存区内的正文数据，并且清空响应状态代码及响应头。</p><p>9）resetBuffer（）：仅仅清空缓存区内的正文数据，不清空响应状态代码及响应头。</p><p>10）flushBuffer（）：强制性地把缓存区内的响应正文数据发送到客户端。</p><p>11）isCommitted（）：返回一个boolean类型的值。如果为true，表示缓存区内的数据已经提交给客户，即数据已经发送到客户端。</p><p>12）getOutputStream（）：返回一个ServletOutputStream对象，Servlet用它来输出二进制的正文数据。</p><p>13）getWriter（）：返回一个PrintWriter对象，Servlet用它来输出字符串形式的正文数据。</p><p>补充：</p><p>ServletResponse中的响应正文的默认MIME类型为text/plain，即纯文本类型。</p><p>而HttpServletResponse中的响应正文的默认MIME类型为text/html，即HTML文档类型。</p><p>设置响应的内容类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;application/x-abiword&quot;);//括号内容在tomcat的conf下web.xml里面搜索‘word’找到。</span><br></pre></td></tr></table></figure><p>getWriter(): 返回Print Writer对象，调用该对象的print()方法，将把print()中的参数直接打印到客户的浏览器上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter out = response.getWriter();//取得输出流</span><br><span class="line">out.println(&quot;helloworld...&quot;);</span><br><span class="line">out.flush();//flush()意思是把缓冲区的内容强制的写出。</span><br><span class="line">out.close();//关闭读写流。</span><br></pre></td></tr></table></figure></p><p>当完成以上任务后，就可以实现在线下载文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、ServletRequest&quot;&gt;&lt;a href=&quot;#一、ServletRequest&quot; class=&quot;headerlink&quot; title=&quot;一、ServletRequest&quot;&gt;&lt;/a&gt;一、ServletRequest&lt;/h2&gt;&lt;h4 id=&quot;def：-Serv
      
    
    </summary>
    
    
      <category term="ServletRequest" scheme="http://yoursite.com/tags/ServletRequest/"/>
    
      <category term="ServletResponse" scheme="http://yoursite.com/tags/ServletResponse/"/>
    
  </entry>
  
  <entry>
    <title>运行时文件不在WEb-INF下，但运行地址却在WEB-INF下</title>
    <link href="http://yoursite.com/2018/07/18/%E8%BF%90%E8%A1%8CJavaWeb%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/18/运行JavaWeb程序遇到的问题/</id>
    <published>2018-07-18T03:54:09.457Z</published>
    <updated>2018-07-18T03:54:09.457Z</updated>
    
    <content type="html"><![CDATA[<p>碰到这个问题是不是很绝望，是不是纠结了好久，百度又找不出来。<br><img src="https://s1.ax1x.com/2018/07/18/P1VGPe.png" alt="bug"><br>是不是这个界面呀<br>可以看出，运行的文件是在WEB-INF下面<br>在这里扩展下WEB-INF目录作用<br><strong>WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br>WEB-INF文件夹下除了web.xml外，还存一个classes文件夹，用以放置 <em>.class文件，这些 </em>.class文件是网站设计人员编写的类库，实现了jsp页面前台美工与后台服务的分离，使得网站的维护非常方便。web.xml文件为网站部署描述XML文件，对网站的部署非常重要。<br>Web-Inf文件夹中除了有classes文件夹和一个web.xml文件外、还有lib文件夹（用于存放需要的jar包）（用于配置，比如说用来配置过滤器等。）</strong><br>因此，可能会是文件建立出错<br>所以，文件的存放位置要<br><img src="https://s1.ax1x.com/2018/07/18/P1Ezgs.png" alt="文件位置"><br>如果这样还是出现如图所示的【HTTP Status 404】错误，别担心，还有办法，那就是在新建的Servlet的文件里面修改下代码<br>例如我的java文件名为Test：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Test extends HttpServlet &#123;</span><br></pre></td></tr></table></figure></p><p>就完成了<br><img src="https://s1.ax1x.com/2018/07/18/P1VuK1.png" alt="完成"><br>ps：但是遇到这种错误是老师要求将<code>extends HttpServlet</code>改为<code>implements Servlet</code>，改完后可以运行，但是过段时间就不可以了。现在还不清楚原因，当知道解决办法。麻烦知道的留言，谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;碰到这个问题是不是很绝望，是不是纠结了好久，百度又找不出来。&lt;br&gt;&lt;img src=&quot;https://s1.ax1x.com/2018/07/18/P1VGPe.png&quot; alt=&quot;bug&quot;&gt;&lt;br&gt;是不是这个界面呀&lt;br&gt;可以看出，运行的文件是在WEB-INF下面&lt;br
      
    
    </summary>
    
      <category term="“运行JavaWeb程序遇到的问题”" scheme="http://yoursite.com/categories/%E2%80%9C%E8%BF%90%E8%A1%8CJavaWeb%E7%A8%8B%E5%BA%8F%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E2%80%9D/"/>
    
    
      <category term="JavaWeb" scheme="http://yoursite.com/tags/JavaWeb/"/>
    
      <category term="WEB-INF" scheme="http://yoursite.com/tags/WEB-INF/"/>
    
      <category term="Eclipse" scheme="http://yoursite.com/tags/Eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Java Web学习之Servlet（一）</title>
    <link href="http://yoursite.com/2018/07/17/Java%20Web%E5%AD%A6%E4%B9%A0%E4%B9%8BServlet/"/>
    <id>http://yoursite.com/2018/07/17/Java Web学习之Servlet/</id>
    <published>2018-07-17T09:35:12.784Z</published>
    <updated>2018-07-18T09:26:30.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、ServletConfig"><a href="#一、ServletConfig" class="headerlink" title="一、ServletConfig"></a>一、ServletConfig</h2><p>在Servlet的配置文件中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数。（配置在某个servlet标签或者整个web-app下）<br>当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，程序员通过ServletConfig对象就可以得到当前servlet的初始化参数信息。<br>好处：将数据库信息、编码方式等配置信息放在web.xml中，修改数据库的用户名和密码时，则直接很方便地修改web.xml就行了，避免了直接修改源代码的麻烦。</init-param></p><h4 id="String-getServletName-–-获取当前Servlet在web-xml中配置的名字。"><a href="#String-getServletName-–-获取当前Servlet在web-xml中配置的名字。" class="headerlink" title="String getServletName()  – 获取当前Servlet在web.xml中配置的名字。"></a>String getServletName()  – 获取当前Servlet在web.xml中配置的名字。</h4><h4 id="String-getInitParameter-String-name-–-获取当前Servlet指定名称的初始化参数的值。"><a href="#String-getInitParameter-String-name-–-获取当前Servlet指定名称的初始化参数的值。" class="headerlink" title="String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值。"></a>String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值。</h4><h4 id="Enumeration-getInitParameterNames-–-获取当前Servlet所有初始化参数的名字组成的枚举。"><a href="#Enumeration-getInitParameterNames-–-获取当前Servlet所有初始化参数的名字组成的枚举。" class="headerlink" title="Enumeration getInitParameterNames()  – 获取当前Servlet所有初始化参数的名字组成的枚举。"></a>Enumeration getInitParameterNames()  – 获取当前Servlet所有初始化参数的名字组成的枚举。</h4><p>在web.xml里配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.itshixun.day2.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;!-- 配置Serlvet 的初始化参数 --&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;!-- 参数名 --&gt;</span><br><span class="line">  &lt;param-name&gt;user&lt;/param-name&gt;</span><br><span class="line">  &lt;!-- 参数值 --&gt;</span><br><span class="line">  &lt;param-value&gt;root&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;password&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;1234&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><p>这里配置了两个参数名和其对应的参数值。然后在代码中获取配置好的参数。(我是在init中获取参数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sname = config.getServletName();//获取当前Servlet在web.xml中配置的名称</span><br><span class="line">private String user = config.getInitParameter(&quot;user&quot;);//获取参数名为user的参数值</span><br><span class="line">private String password = config.getInitParameter(&quot;password&quot;);//获取参数名为password的参数值</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//一次获取Servlet里的所有初始参数</span><br><span class="line">Enumeration&lt;String&gt; names = config.getInitParameterNames();</span><br><span class="line">while(names.hasMoreElements())&#123;</span><br><span class="line">String name = names.nextElement();</span><br><span class="line">    String value = config.getInitParameter(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、ServletContext：代表当前Web应用（非常重要）（段落来源：http-www-cnblogs-com-smyhvae-p-4140877-html）"><a href="#二、ServletContext：代表当前Web应用（非常重要）（段落来源：http-www-cnblogs-com-smyhvae-p-4140877-html）" class="headerlink" title="二、ServletContext：代表当前Web应用（非常重要）（段落来源：http://www.cnblogs.com/smyhvae/p/4140877.html）"></a>二、ServletContext：代表当前Web应用（非常重要）（段落来源：<a href="http://www.cnblogs.com/smyhvae/p/4140877.html）" target="_blank" rel="noopener">http://www.cnblogs.com/smyhvae/p/4140877.html）</a></h2><p>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。ServletConfig对象中维护了ServletContext对象的引用，开发人员在编写servlet时，可以通过ServletConfig.getServletContext方法获得ServletContext对象。由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。ServletContext对象通常也被称之为context域对象。<br>ServletContext的应用：</p><h3 id="1、做为域对象可以在整个Web应用范围内共享数据。"><a href="#1、做为域对象可以在整个Web应用范围内共享数据。" class="headerlink" title="1、做为域对象可以在整个Web应用范围内共享数据。"></a>1、做为域对象可以在整个Web应用范围内共享数据。</h3><p>域对象：在一个可以被看见的范围内共享数据用到对象<br>作用范围：整个web应用范围内共享数据<br>生命周期：当服务器启动web应用加载后创建出ServletContext对象后，域产生。当web应用被移除出容器或服务器关闭，随着web应用的销毁域销毁。</p><h3 id="2、获取Web应用的初始化参数"><a href="#2、获取Web应用的初始化参数" class="headerlink" title="2、获取Web应用的初始化参数"></a>2、获取Web应用的初始化参数</h3><p>我们在第一段中，通过<init-param>标签为某一个单独的servlet加配置信息，这种配置信息在其他的Servlet中是无法访问到的。可如果我们使用<context-param>标签（与Servlet标签并列）为整个Web应用配置属性的话，那所有的Servlet就都能访问里面的参数了。例如：可以把数据库的配置信息放在这里。<br>请求参数 parameter — 浏览器发送过来的请求中的参数信息。<br>初始化参数 initparameter — 在web.xml中为Servlet或ServletContext配置的初始化时带有的基本参数。<br>域属性 attribute — 四大作用域中存取的键值对。<br>在web.xml中为整个web应用天机啊初始化参数:用户名、密码。代码要放到<serclet>上面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;username&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;gsj&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;userpassword&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;123456&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></serclet></context-param></init-param></p><p>在代码中实现，同样在init方法里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//获得单个ServletContext里面的初始化参数</span><br><span class="line">ServletContext context = config.getServletContext();</span><br><span class="line">String value1 = context.getInitParameter(&quot;username&quot;);</span><br><span class="line">String value2 = context.getInitParameter(&quot;userpassword&quot;);</span><br><span class="line">System.out.println(value1 + &quot;;&quot; + value2);</span><br><span class="line">//一次获得全部ServletContext里的初始化参数</span><br><span class="line">Enumeration enumeration = context.getInitParameterNames();</span><br><span class="line">while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">String name = (String) enumeration.nextElement();</span><br><span class="line">String value = context.getInitParameter(name);</span><br><span class="line">    System.out.println(name + &quot;;&quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码地址：链接：<a href="https://pan.baidu.com/s/1AQG_Xy74Xvwel9lZO2dFUQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1AQG_Xy74Xvwel9lZO2dFUQ</a> 密码：s95b<br>好啦，此篇写完，继续学习，再更新。<br>ps:博客几天实现了留言功能，但是需要github账号登陆才可评论。欢迎评论呀~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、ServletConfig&quot;&gt;&lt;a href=&quot;#一、ServletConfig&quot; class=&quot;headerlink&quot; title=&quot;一、ServletConfig&quot;&gt;&lt;/a&gt;一、ServletConfig&lt;/h2&gt;&lt;p&gt;在Servlet的配置文件中，可以使
      
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="Java Web" scheme="http://yoursite.com/tags/Java-Web/"/>
    
      <category term="Servlet" scheme="http://yoursite.com/tags/Servlet/"/>
    
      <category term="ServletConfig" scheme="http://yoursite.com/tags/ServletConfig/"/>
    
      <category term="ServletContext" scheme="http://yoursite.com/tags/ServletContext/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/15/hello-world/"/>
    <id>http://yoursite.com/2018/07/15/hello-world/</id>
    <published>2018-07-15T09:01:53.015Z</published>
    <updated>2018-07-17T05:36:27.196Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
