<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java Web学习之Servlet</title>
      <link href="/2018/07/17/Java%20Web%E5%AD%A6%E4%B9%A0%E4%B9%8BServlet/"/>
      <url>/2018/07/17/Java%20Web%E5%AD%A6%E4%B9%A0%E4%B9%8BServlet/</url>
      <content type="html"><![CDATA[<h2 id="一、ServletConfig"><a href="#一、ServletConfig" class="headerlink" title="一、ServletConfig"></a>一、ServletConfig</h2><p>在Servlet的配置文件中，可以使用一个或多个<init-param>标签为servlet配置一些初始化参数。（配置在某个servlet标签或者整个web-app下）<br>当servlet配置了初始化参数后，web容器在创建servlet实例对象时，会自动将这些初始化参数封装到ServletConfig对象中，并在调用servlet的init方法时，将ServletConfig对象传递给servlet。进而，程序员通过ServletConfig对象就可以得到当前servlet的初始化参数信息。<br>好处：将数据库信息、编码方式等配置信息放在web.xml中，修改数据库的用户名和密码时，则直接很方便地修改web.xml就行了，避免了直接修改源代码的麻烦。</init-param></p><h4 id="String-getServletName-–-获取当前Servlet在web-xml中配置的名字。"><a href="#String-getServletName-–-获取当前Servlet在web-xml中配置的名字。" class="headerlink" title="String getServletName()  – 获取当前Servlet在web.xml中配置的名字。"></a>String getServletName()  – 获取当前Servlet在web.xml中配置的名字。</h4><h4 id="String-getInitParameter-String-name-–-获取当前Servlet指定名称的初始化参数的值。"><a href="#String-getInitParameter-String-name-–-获取当前Servlet指定名称的初始化参数的值。" class="headerlink" title="String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值。"></a>String getInitParameter(String name) – 获取当前Servlet指定名称的初始化参数的值。</h4><h4 id="Enumeration-getInitParameterNames-–-获取当前Servlet所有初始化参数的名字组成的枚举。"><a href="#Enumeration-getInitParameterNames-–-获取当前Servlet所有初始化参数的名字组成的枚举。" class="headerlink" title="Enumeration getInitParameterNames()  – 获取当前Servlet所有初始化参数的名字组成的枚举。"></a>Enumeration getInitParameterNames()  – 获取当前Servlet所有初始化参数的名字组成的枚举。</h4><p>在web.xml里配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.itshixun.day2.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;!-- 配置Serlvet 的初始化参数 --&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;!-- 参数名 --&gt;</span><br><span class="line">  &lt;param-name&gt;user&lt;/param-name&gt;</span><br><span class="line">  &lt;!-- 参数值 --&gt;</span><br><span class="line">  &lt;param-value&gt;root&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">  &lt;param-name&gt;password&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;1234&lt;/param-value&gt;</span><br><span class="line">  &lt;/init-param&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br></pre></td></tr></table></figure></p><p>这里配置了两个参数名和其对应的参数值。然后在代码中获取配置好的参数。(我是在init中获取参数)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sname = config.getServletName();//获取当前Servlet在web.xml中配置的名称</span><br><span class="line">private String user = config.getInitParameter(&quot;user&quot;);//获取参数名为user的参数值</span><br><span class="line">private String password = config.getInitParameter(&quot;password&quot;);//获取参数名为password的参数值</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//一次获取Servlet里的所有初始参数</span><br><span class="line">Enumeration&lt;String&gt; names = config.getInitParameterNames();</span><br><span class="line">while(names.hasMoreElements())&#123;</span><br><span class="line">String name = names.nextElement();</span><br><span class="line">    String value = config.getInitParameter(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、ServletContext：代表当前Web应用（非常重要）（段落来源：http-www-cnblogs-com-smyhvae-p-4140877-html）"><a href="#二、ServletContext：代表当前Web应用（非常重要）（段落来源：http-www-cnblogs-com-smyhvae-p-4140877-html）" class="headerlink" title="二、ServletContext：代表当前Web应用（非常重要）（段落来源：http://www.cnblogs.com/smyhvae/p/4140877.html）"></a>二、ServletContext：代表当前Web应用（非常重要）（段落来源：<a href="http://www.cnblogs.com/smyhvae/p/4140877.html）" target="_blank" rel="noopener">http://www.cnblogs.com/smyhvae/p/4140877.html）</a></h2><p>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。ServletConfig对象中维护了ServletContext对象的引用，开发人员在编写servlet时，可以通过ServletConfig.getServletContext方法获得ServletContext对象。由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。ServletContext对象通常也被称之为context域对象。<br>ServletContext的应用：</p><h3 id="1、做为域对象可以在整个Web应用范围内共享数据。"><a href="#1、做为域对象可以在整个Web应用范围内共享数据。" class="headerlink" title="1、做为域对象可以在整个Web应用范围内共享数据。"></a>1、做为域对象可以在整个Web应用范围内共享数据。</h3><p>域对象：在一个可以被看见的范围内共享数据用到对象<br>作用范围：整个web应用范围内共享数据<br>生命周期：当服务器启动web应用加载后创建出ServletContext对象后，域产生。当web应用被移除出容器或服务器关闭，随着web应用的销毁域销毁。</p><h3 id="2、获取Web应用的初始化参数"><a href="#2、获取Web应用的初始化参数" class="headerlink" title="2、获取Web应用的初始化参数"></a>2、获取Web应用的初始化参数</h3><p>我们在第一段中，通过<init-param>标签为某一个单独的servlet加配置信息，这种配置信息在其他的Servlet中是无法访问到的。可如果我们使用<context-param>标签（与Servlet标签并列）为整个Web应用配置属性的话，那所有的Servlet就都能访问里面的参数了。例如：可以把数据库的配置信息放在这里。<br>请求参数 parameter — 浏览器发送过来的请求中的参数信息。<br>初始化参数 initparameter — 在web.xml中为Servlet或ServletContext配置的初始化时带有的基本参数。<br>域属性 attribute — 四大作用域中存取的键值对。<br>在web.xml中为整个web应用天机啊初始化参数:用户名、密码。代码要放到<serclet>上面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;username&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;gsj&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;userpassword&lt;/param-name&gt;</span><br><span class="line">  &lt;param-value&gt;123456&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure></serclet></context-param></init-param></p><p>在代码中实现，同样在init方法里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//获得单个ServletContext里面的初始化参数</span><br><span class="line">ServletContext context = config.getServletContext();</span><br><span class="line">String value1 = context.getInitParameter(&quot;username&quot;);</span><br><span class="line">String value2 = context.getInitParameter(&quot;userpassword&quot;);</span><br><span class="line">System.out.println(value1 + &quot;;&quot; + value2);</span><br><span class="line">//一次获得全部ServletContext里的初始化参数</span><br><span class="line">Enumeration enumeration = context.getInitParameterNames();</span><br><span class="line">while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">String name = (String) enumeration.nextElement();</span><br><span class="line">String value = context.getInitParameter(name);</span><br><span class="line">    System.out.println(name + &quot;;&quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码地址：链接：<a href="https://pan.baidu.com/s/1AQG_Xy74Xvwel9lZO2dFUQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1AQG_Xy74Xvwel9lZO2dFUQ</a> 密码：s95b<br>好啦，此篇写完，继续学习，再更新。<br>ps:博客几天实现了留言功能，但是需要github账号登陆才可评论。欢迎评论呀~~~</p>]]></content>
      
      <categories>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web </tag>
            
            <tag> Servlet </tag>
            
            <tag> ServletConfig </tag>
            
            <tag> ServletContext </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Tomcat和建立第一个Java Web程序</title>
      <link href="/2018/07/16/a/"/>
      <url>/2018/07/16/a/</url>
      <content type="html"><![CDATA[<h3 id="一、Tomcat简介"><a href="#一、Tomcat简介" class="headerlink" title="一、Tomcat简介"></a>一、Tomcat简介</h3><p> Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><h3 id="二、安装Tomcat"><a href="#二、安装Tomcat" class="headerlink" title="二、安装Tomcat"></a>二、安装Tomcat</h3><p>这里安装的<a href="https://pan.baidu.com/s/1guHszTKl_fTYpWjGAhrX9w" target="_blank" rel="noopener">Tomcat</a>的版本为Tomcat 7.0，可以自行去Tomcat官网下载，也可以点击文本中的超链接进行下载（百度网盘）。将下载好的Tomcat压缩文件直接解压到制定的目录便可完成Tomcat的安装。<img src="https://s1.ax1x.com/2018/07/16/PQfIv8.md.png" alt="Tomcat目录"></p><p>对子目录进行简介：</p><p>（1）bin: 用于存放Tomcat的可执行文件和脚本文件（扩展名为bat的文件），如tomcat7.exe、startup.bat（启动Tomcat的脚本文件）。</p><p>（2）conf: 用于存放Tomcat的各种配置文件，如web.xml、server.xml。</p><p>（3）lib: 用于存放Tomcat服务器和所有Web应用程序需要访问的JAR文件。</p><p>（4）logs: 用于存放Tomcat的日志文件</p><p>（5）temp: 用于存放Tomcat运行时产生的临时文件。</p><p>（6）webapps: Web应用程序的主要发布目录，通常将要发布的应用程序放在这个目录下。</p><p>（7）work: Tomcat的工作目录，JSP编译生成的Servlet源文件和字节码文件放在这个目录下。</p><p>双击startup.bat文件（后缀为.bat），便会启动Tomcat服务器，此时，可以在命令行看到一些启动信息。<img src="https://s1.ax1x.com/2018/07/16/PQh9rF.md.png" alt="启动程序"></p><h3 id="三、Tomcat诊断"><a href="#三、Tomcat诊断" class="headerlink" title="三、Tomcat诊断"></a>三、Tomcat诊断</h3><p>安装启动Tomcat时，可能会遇到双击bin目录下startup.bat脚本文件是，命令行窗口一闪而过。可以先启动一个命令行窗口，在这个命令行窗口中执行startup.bat命令，就会卡你到错误信息显示izai该窗口。然后再根据具体问题，具体分析。</p><h3 id="四、编写第一个Java-Web程序"><a href="#四、编写第一个Java-Web程序" class="headerlink" title="四、编写第一个Java Web程序"></a>四、编写第一个Java Web程序</h3><p>打开<a href="https://pan.baidu.com/s/1X8nN7YlJZ3yzqszRCzArpA" target="_blank" rel="noopener">Eclipse</a>，单击工具栏中的【Window】-&gt;【Perferences】选项，会弹出一个【Perferences】窗体，在该窗口中单机坐车菜单中的【Server】选项，值啊展开的菜单中选择最后一项【Runtime Environments】，这是窗口右侧会出现【Server Runtime Environment】选项卡，如图（我已经安装完毕，所以有东西，初始时没有）<img src="https://s1.ax1x.com/2018/07/16/PQh7z6.md.png" alt="选项卡">，点击【Add】，选择自己的服务器和版本号，我的是apache-tomcat-7.0.67，所以选择的是【Apache Tomcat v7.0】<img src="https://s1.ax1x.com/2018/07/16/PQhXee.png" alt="">，之后点【Next】，在弹出的窗口单击【Browser】按钮，选择安装Tomcat服务器的目录，最后点击【Finish】-&gt;【OK】按钮，完成Eclipse和Tomcat服务器的关联。<img src="https://s1.ax1x.com/2018/07/16/PQ4MlV.png" alt=""></p><p>单击Eclipse下侧窗口的【Servers】选项卡标签，在该选项卡中可以看到一个“No server avaliable.Define a new server from the new server wizard…”的链接，单击链接，会弹出一个【New Server】窗口。选中最上面的文件夹中的【Tomcat v7.0 Server at localhost】选项。就此完成配置。</p><p>在Eclipse左侧右键新建【Project】，选中【Web】文件夹下【Dynamic Web Project】<img src="https://s1.ax1x.com/2018/07/16/PQ4GTJ.md.png" alt="创建项目">，起好名字后点【Next】，直到最后一页，选中唯一一个可选的项，再点【Finish】即可完成。<img src="https://s1.ax1x.com/2018/07/16/PQ4r0e.png" alt="finish">在建立的项目中右键即可创建.jsp文件，生成的.jsp文件会在【WebContent】文件下下面，一般情况下会出现错误，这个错误是构建路径问题。点击项目右键选择【java build path】点击进入，然后在右边的窗口上选择如图。<img src="https://s1.ax1x.com/2018/07/16/PQ4f6f.png" alt="导库">，点击【外部库】，选择Tomcat中lib下的servlet.api即可。如图<img src="https://s1.ax1x.com/2018/07/16/PQ45nS.md.png" alt="servler.api">，下面就实现你想要的目标吧！（jsp类似于html）</p>]]></content>
      
      <categories>
          
          <category> Eclipse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/15/hello-world/"/>
      <url>/2018/07/15/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
